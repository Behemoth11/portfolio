{"version":3,"file":"component---src-pages-index-js-5b0159425a1f0e703df0.js","mappings":"mNAOMA,EAAO,WACX,OAA4BC,EAAAA,EAAAA,MAAbC,GAAf,EAAQC,MAAR,EAAeD,UAETE,ECJqB,SAC3BC,EACAC,GAEA,OAAgCC,EAAAA,EAAAA,YAAzBH,EAAP,KAAiBI,EAAjB,KAOA,OALAC,EAAAA,EAAAA,YAAU,WACNH,EAAOI,KAAOC,UAChBH,EAAY,IAAII,qBAAqBP,EAAIC,MACxC,IAEIF,EDPUS,EACf,SAAAC,GACEC,QAAQC,IAAI,MACZF,EAAQG,SAAQ,SAAAC,GACVA,EAAMC,iBACRJ,QAAQC,IACN,OACAF,EAAQM,KAAI,SAAAF,GAAK,OAAIA,EAAMG,OAAOC,QAAQnB,UAE5CY,QAAQC,IACN,gBACAF,EACGS,QAAO,SAAAL,GAAK,OAAIA,EAAMC,kBACtBC,KAAI,SAAAF,GAAK,OAAIA,EAAMG,OAAOC,QAAQnB,UAEvCD,EAASgB,EAAMG,OAAOC,QAAQnB,aAIpC,CACEO,KAAMc,SAASC,cAAc,yBAC7BC,WAAY,mBAKhB,OACE,gCACE,gBAACC,EAAD,CAASvB,SAAUA,EAAUwB,UAAU,gBAAgBzB,MAAM,SAC7D,gBAACwB,EAAD,CAASvB,SAAUA,EAAUwB,UAAU,YAAYzB,MAAM,UACzD,gBAACwB,EAAD,CAASvB,SAAUA,EAAUwB,UAAU,eAAezB,MAAM,WAK5DwB,EAAU,SAAC,GAAoC,IAAlCvB,EAAiC,EAAjCA,SAAUwB,EAAuB,EAAvBA,UAAWzB,EAAY,EAAZA,MAChC0B,EAAaC,EAAAA,SAInB,OAHArB,EAAAA,EAAAA,YAAU,WACRL,MAAAA,GAAAA,EAAU2B,QAAQF,EAAWG,WAC5B,IAED,uBACEC,IAAKJ,EACL,aAAY1B,EACZyB,UAAcA,EAAL,qCAaf,EARkB,WAChB,OACE,gBAACM,EAAA,GAAD,KACE,gBAAClC,EAAD","sources":["webpack://gatsby-starter-default/./src/pages/index.js","webpack://gatsby-starter-default/./src/lib/hooks.ts"],"sourcesContent":["import React, { useEffect, useRef } from \"react\"\nimport { Link } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nimport Layout, { useNavContext } from \"../components/Layout\"\nimport { useIntersectionObserver } from \"../lib/hooks\"\n\nconst Page = () => {\n  const { theme, setTheme } = useNavContext()\n  \n  const observer = useIntersectionObserver(\n    entries => {\n      console.log(\"dd\")\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          console.log(\n            \"All \",\n            entries.map(entry => entry.target.dataset.theme)\n          )\n          console.log(\n            \"Intersecting \",\n            entries\n              .filter(entry => entry.isIntersecting)\n              .map(entry => entry.target.dataset.theme)\n          )\n          setTheme(entry.target.dataset.theme)\n        }\n      })\n    },\n    {\n      root: document.querySelector(\"#gatsby-focus-wrapper\"),\n      rootMargin: \"0% 0%  -99% 0%\",\n    },\n    () => document.querySelector(\"#gatsby-focus-wrapper\")\n  )\n\n  return (\n    <>\n      <Section observer={observer} className=\" bg-slate-900\" theme=\"dark\" />\n      <Section observer={observer} className=\" bg-white\" theme=\"white\" />\n      <Section observer={observer} className=\" bg-blue-800\" theme=\"blue\" />\n    </>\n  )\n}\n\nconst Section = ({ observer, className, theme }) => {\n  const sectionRef = React.useRef()\n  useEffect(() => {\n    observer?.observe(sectionRef.current)\n  }, [])\n  return (\n    <div\n      ref={sectionRef}\n      data-theme={theme}\n      className={`${className} w-full h-screen max-h-[1250px]`}\n    ></div>\n  )\n}\n\nconst IndexPage = () => {\n  return (\n    <Layout>\n      <Page />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n","import { useState, useRef, useEffect } from \"react\"\n\nexport const useIntersectionObserver: (\n  cb,\n  config,\n  getRoot\n) =>  IntersectionObserver = (\n  cb,\n  config\n) => {\n  const [observer, setObserver] = useState<IntersectionObserver>()\n\n  useEffect(() => {\n      config.root = getRoot();\n    setObserver(new IntersectionObserver(cb, config))\n  }, [])\n\n  return observer\n}\n"],"names":["Page","useNavContext","setTheme","theme","observer","cb","config","useState","setObserver","useEffect","root","getRoot","IntersectionObserver","useIntersectionObserver","entries","console","log","forEach","entry","isIntersecting","map","target","dataset","filter","document","querySelector","rootMargin","Section","className","sectionRef","React","observe","current","ref","Layout"],"sourceRoot":""}